apply plugin: 'com.android.application'

//def keystorePropertiesFileNeo = rootProject.file("../../Keystore/wifidoc-keystore.properties")
//def keystorePropertiesNeo = new Properties()
//keystorePropertiesNeo.load(new FileInputStream(keystorePropertiesFileNeo))


android {

    signingConfigs {
//        expertSystem_config {
//            keyAlias keystorePropertiesNeo['keyAlias']
//            keyPassword keystorePropertiesNeo['keyPassword']
//            storeFile file(keystorePropertiesNeo['storeFile'])
//            storePassword keystorePropertiesNeo['storePassword']
//        }
        config {
            keyAlias 'neo'
            keyPassword 'neo123'
            storeFile file('../../Keystore/neo-key.jks')
            storePassword 'neo123'
        }
    }
    flavorDimensions "dummy"
    compileSdkVersion 25
    buildToolsVersion '28.0.3'
    defaultConfig {
        vectorDrawables.useSupportLibrary = true
        applicationId "com.inceptai.wifiexpertsystem"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        signingConfig signingConfigs.config
    }
    productFlavors {
        expertSystem {
            applicationId "com.inceptai.wifiexpertsystem"
            versionCode 2
            versionName "1.0.0"
            signingConfig signingConfigs.config
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            useProguard false
            //productFlavors.expertSystem.signingConfig signingConfigs.expertSystem_config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    lintOptions {
        abortOnError false
    }
    dexOptions {
        jumboMode = true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:25.3.1'
    implementation 'com.android.support:design:25.3.1'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.google.code.gson:gson:2.7'
    implementation 'commons-io:commons-io:2.4'
    implementation 'com.google.guava:guava:20.0'
    implementation 'com.android.support:support-v4:25.3.1'
    implementation 'com.android.support:cardview-v7:25.3.1'
    implementation 'com.android.support:recyclerview-v7:25.3.1'

    //Firebase
    implementation 'com.google.firebase:firebase-crash:10.0.1'
    implementation 'com.google.firebase:firebase-core:10.0.1'
    implementation 'com.google.firebase:firebase-database:10.0.1'
    implementation 'com.google.firebase:firebase-storage:10.0.1'
    implementation 'com.google.firebase:firebase-messaging:10.0.1'
    implementation 'com.google.firebase:firebase-config:10.0.1'
    implementation project(':neo-service')
    implementation project(':wifimonitoring-service')
    implementation 'ai.api:sdk:2.0.5@aar'
    implementation "io.reactivex.rxjava2:rxjava:2.2.6"
    // api.ai SDK dependencies
    implementation('ai.api:libai:1.4.8') {
        exclude module: 'log4j-core'
    }
    implementation 'com.android.support:multidex:1.0.1'
    implementation 'com.google.dagger:dagger-android:2.20'
    implementation 'com.google.dagger:dagger-android-support:2.20' // if you use the support libraries
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.20'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.20'
    testImplementation 'junit:junit:4.12'
}

apply plugin: 'com.google.gms.google-services'
